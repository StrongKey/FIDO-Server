
package com.strongkey.saka.web;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Encryption", targetNamespace = "http://web.strongkeylite.strongauth.com/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Encryption {


    /**
     * 
     * @param password
     * @param size
     * @param did
     * @param username
     * @return
     *     returns java.lang.String
     * @throws StrongKeyLiteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "entropy", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.Entropy")
    @ResponseWrapper(localName = "entropyResponse", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.EntropyResponse")
    @Action(input = "http://web.strongkeylite.strongauth.com/Encryption/entropyRequest", output = "http://web.strongkeylite.strongauth.com/Encryption/entropyResponse", fault = {
        @FaultAction(className = StrongKeyLiteException_Exception.class, value = "http://web.strongkeylite.strongauth.com/Encryption/entropy/Fault/StrongKeyLiteException")
    })
    public String entropy(
        @WebParam(name = "did", targetNamespace = "")
        Long did,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "size", targetNamespace = "")
        Integer size)
        throws StrongKeyLiteException_Exception
    ;

    /**
     * 
     * @param password
     * @param relayencoding
     * @param relayurl
     * @param relayprotocol
     * @param relaycontent
     * @param did
     * @param username
     * @return
     *     returns java.lang.String
     * @throws StrongKeyLiteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "relay", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.Relay")
    @ResponseWrapper(localName = "relayResponse", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.RelayResponse")
    @Action(input = "http://web.strongkeylite.strongauth.com/Encryption/relayRequest", output = "http://web.strongkeylite.strongauth.com/Encryption/relayResponse", fault = {
        @FaultAction(className = StrongKeyLiteException_Exception.class, value = "http://web.strongkeylite.strongauth.com/Encryption/relay/Fault/StrongKeyLiteException")
    })
    public String relay(
        @WebParam(name = "did", targetNamespace = "")
        Long did,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "relayurl", targetNamespace = "")
        String relayurl,
        @WebParam(name = "relayprotocol", targetNamespace = "")
        String relayprotocol,
        @WebParam(name = "relayencoding", targetNamespace = "")
        String relayencoding,
        @WebParam(name = "relaycontent", targetNamespace = "")
        String relaycontent)
        throws StrongKeyLiteException_Exception
    ;

    /**
     * 
     * @param inputfile
     * @param password
     * @param did
     * @param username
     * @return
     *     returns java.lang.String
     * @throws StrongKeyLiteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchEncrypt", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.BatchEncrypt")
    @ResponseWrapper(localName = "batchEncryptResponse", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.BatchEncryptResponse")
    @Action(input = "http://web.strongkeylite.strongauth.com/Encryption/batchEncryptRequest", output = "http://web.strongkeylite.strongauth.com/Encryption/batchEncryptResponse", fault = {
        @FaultAction(className = StrongKeyLiteException_Exception.class, value = "http://web.strongkeylite.strongauth.com/Encryption/batchEncrypt/Fault/StrongKeyLiteException")
    })
    public String batchEncrypt(
        @WebParam(name = "did", targetNamespace = "")
        Long did,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "inputfile", targetNamespace = "")
        String inputfile)
        throws StrongKeyLiteException_Exception
    ;

    /**
     * 
     * @param inputfile
     * @param password
     * @param did
     * @param username
     * @return
     *     returns java.lang.String
     * @throws StrongKeyLiteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchDecrypt", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.BatchDecrypt")
    @ResponseWrapper(localName = "batchDecryptResponse", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.BatchDecryptResponse")
    @Action(input = "http://web.strongkeylite.strongauth.com/Encryption/batchDecryptRequest", output = "http://web.strongkeylite.strongauth.com/Encryption/batchDecryptResponse", fault = {
        @FaultAction(className = StrongKeyLiteException_Exception.class, value = "http://web.strongkeylite.strongauth.com/Encryption/batchDecrypt/Fault/StrongKeyLiteException")
    })
    public String batchDecrypt(
        @WebParam(name = "did", targetNamespace = "")
        Long did,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "inputfile", targetNamespace = "")
        String inputfile)
        throws StrongKeyLiteException_Exception
    ;

    /**
     * 
     * @param inputfile
     * @param password
     * @param did
     * @param username
     * @return
     *     returns java.lang.String
     * @throws StrongKeyLiteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchDelete", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.BatchDelete")
    @ResponseWrapper(localName = "batchDeleteResponse", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.BatchDeleteResponse")
    @Action(input = "http://web.strongkeylite.strongauth.com/Encryption/batchDeleteRequest", output = "http://web.strongkeylite.strongauth.com/Encryption/batchDeleteResponse", fault = {
        @FaultAction(className = StrongKeyLiteException_Exception.class, value = "http://web.strongkeylite.strongauth.com/Encryption/batchDelete/Fault/StrongKeyLiteException")
    })
    public String batchDelete(
        @WebParam(name = "did", targetNamespace = "")
        Long did,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "inputfile", targetNamespace = "")
        String inputfile)
        throws StrongKeyLiteException_Exception
    ;

    /**
     * 
     * @param inputfile
     * @param password
     * @param did
     * @param username
     * @return
     *     returns java.lang.String
     * @throws StrongKeyLiteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "batchSearch", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.BatchSearch")
    @ResponseWrapper(localName = "batchSearchResponse", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.BatchSearchResponse")
    @Action(input = "http://web.strongkeylite.strongauth.com/Encryption/batchSearchRequest", output = "http://web.strongkeylite.strongauth.com/Encryption/batchSearchResponse", fault = {
        @FaultAction(className = StrongKeyLiteException_Exception.class, value = "http://web.strongkeylite.strongauth.com/Encryption/batchSearch/Fault/StrongKeyLiteException")
    })
    public String batchSearch(
        @WebParam(name = "did", targetNamespace = "")
        Long did,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "inputfile", targetNamespace = "")
        String inputfile)
        throws StrongKeyLiteException_Exception
    ;

    /**
     * 
     * @param password
     * @param did
     * @return
     *     returns java.lang.String
     * @throws StrongKeyLiteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ping", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.Ping")
    @ResponseWrapper(localName = "pingResponse", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.PingResponse")
    @Action(input = "http://web.strongkeylite.strongauth.com/Encryption/pingRequest", output = "http://web.strongkeylite.strongauth.com/Encryption/pingResponse", fault = {
        @FaultAction(className = StrongKeyLiteException_Exception.class, value = "http://web.strongkeylite.strongauth.com/Encryption/ping/Fault/StrongKeyLiteException")
    })
    public String ping(
        @WebParam(name = "did", targetNamespace = "")
        Long did,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws StrongKeyLiteException_Exception
    ;

    /**
     * 
     * @param password
     * @param aad
     * @param gpktoken
     * @param plaintext
     * @param encoding
     * @param iv
     * @param did
     * @param username
     * @param algorithm
     * @return
     *     returns java.lang.String
     * @throws StrongKeyLiteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "gpkEncrypt", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.GpkEncrypt")
    @ResponseWrapper(localName = "gpkEncryptResponse", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.GpkEncryptResponse")
    @Action(input = "http://web.strongkeylite.strongauth.com/Encryption/gpkEncryptRequest", output = "http://web.strongkeylite.strongauth.com/Encryption/gpkEncryptResponse", fault = {
        @FaultAction(className = StrongKeyLiteException_Exception.class, value = "http://web.strongkeylite.strongauth.com/Encryption/gpkEncrypt/Fault/StrongKeyLiteException")
    })
    public String gpkEncrypt(
        @WebParam(name = "did", targetNamespace = "")
        Long did,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "gpktoken", targetNamespace = "")
        String gpktoken,
        @WebParam(name = "plaintext", targetNamespace = "")
        String plaintext,
        @WebParam(name = "encoding", targetNamespace = "")
        String encoding,
        @WebParam(name = "algorithm", targetNamespace = "")
        String algorithm,
        @WebParam(name = "iv", targetNamespace = "")
        String iv,
        @WebParam(name = "aad", targetNamespace = "")
        String aad)
        throws StrongKeyLiteException_Exception
    ;

    /**
     * 
     * @param password
     * @param ciphertext
     * @param aad
     * @param gpktoken
     * @param encoding
     * @param iv
     * @param did
     * @param username
     * @param algorithm
     * @return
     *     returns java.lang.String
     * @throws StrongKeyLiteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "gpkDecrypt", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.GpkDecrypt")
    @ResponseWrapper(localName = "gpkDecryptResponse", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.GpkDecryptResponse")
    @Action(input = "http://web.strongkeylite.strongauth.com/Encryption/gpkDecryptRequest", output = "http://web.strongkeylite.strongauth.com/Encryption/gpkDecryptResponse", fault = {
        @FaultAction(className = StrongKeyLiteException_Exception.class, value = "http://web.strongkeylite.strongauth.com/Encryption/gpkDecrypt/Fault/StrongKeyLiteException")
    })
    public String gpkDecrypt(
        @WebParam(name = "did", targetNamespace = "")
        Long did,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "gpktoken", targetNamespace = "")
        String gpktoken,
        @WebParam(name = "ciphertext", targetNamespace = "")
        String ciphertext,
        @WebParam(name = "encoding", targetNamespace = "")
        String encoding,
        @WebParam(name = "algorithm", targetNamespace = "")
        String algorithm,
        @WebParam(name = "iv", targetNamespace = "")
        String iv,
        @WebParam(name = "aad", targetNamespace = "")
        String aad)
        throws StrongKeyLiteException_Exception
    ;

    /**
     * 
     * @param password
     * @param plaintext
     * @param did
     * @param username
     * @return
     *     returns java.lang.String
     * @throws StrongKeyLiteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "encrypt", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.Encrypt")
    @ResponseWrapper(localName = "encryptResponse", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.EncryptResponse")
    @Action(input = "http://web.strongkeylite.strongauth.com/Encryption/encryptRequest", output = "http://web.strongkeylite.strongauth.com/Encryption/encryptResponse", fault = {
        @FaultAction(className = StrongKeyLiteException_Exception.class, value = "http://web.strongkeylite.strongauth.com/Encryption/encrypt/Fault/StrongKeyLiteException")
    })
    public String encrypt(
        @WebParam(name = "did", targetNamespace = "")
        Long did,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "plaintext", targetNamespace = "")
        String plaintext)
        throws StrongKeyLiteException_Exception
    ;

    /**
     * 
     * @param password
     * @param did
     * @param username
     * @param token
     * @return
     *     returns java.lang.String
     * @throws StrongKeyLiteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "decrypt", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.Decrypt")
    @ResponseWrapper(localName = "decryptResponse", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.DecryptResponse")
    @Action(input = "http://web.strongkeylite.strongauth.com/Encryption/decryptRequest", output = "http://web.strongkeylite.strongauth.com/Encryption/decryptResponse", fault = {
        @FaultAction(className = StrongKeyLiteException_Exception.class, value = "http://web.strongkeylite.strongauth.com/Encryption/decrypt/Fault/StrongKeyLiteException")
    })
    public String decrypt(
        @WebParam(name = "did", targetNamespace = "")
        Long did,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws StrongKeyLiteException_Exception
    ;

    /**
     * 
     * @param password
     * @param did
     * @param username
     * @param token
     * @return
     *     returns java.lang.Boolean
     * @throws StrongKeyLiteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "delete", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.Delete")
    @ResponseWrapper(localName = "deleteResponse", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.DeleteResponse")
    @Action(input = "http://web.strongkeylite.strongauth.com/Encryption/deleteRequest", output = "http://web.strongkeylite.strongauth.com/Encryption/deleteResponse", fault = {
        @FaultAction(className = StrongKeyLiteException_Exception.class, value = "http://web.strongkeylite.strongauth.com/Encryption/delete/Fault/StrongKeyLiteException")
    })
    public Boolean delete(
        @WebParam(name = "did", targetNamespace = "")
        Long did,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws StrongKeyLiteException_Exception
    ;

    /**
     * 
     * @param password
     * @param plaintext
     * @param did
     * @param username
     * @return
     *     returns java.lang.String
     * @throws StrongKeyLiteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "search", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.Search")
    @ResponseWrapper(localName = "searchResponse", targetNamespace = "http://web.strongkeylite.strongauth.com/", className = "com.strongauth.saka.web.SearchResponse")
    @Action(input = "http://web.strongkeylite.strongauth.com/Encryption/searchRequest", output = "http://web.strongkeylite.strongauth.com/Encryption/searchResponse", fault = {
        @FaultAction(className = StrongKeyLiteException_Exception.class, value = "http://web.strongkeylite.strongauth.com/Encryption/search/Fault/StrongKeyLiteException")
    })
    public String search(
        @WebParam(name = "did", targetNamespace = "")
        Long did,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "plaintext", targetNamespace = "")
        String plaintext)
        throws StrongKeyLiteException_Exception
    ;

}
