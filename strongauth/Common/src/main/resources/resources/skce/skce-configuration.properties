# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License, as published by the Free Software Foundation and
# available at http://www.fsf.org/licensing/licenses/lgpl.html,
# version 2.1 or above.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# Copyright (c) 2001-2018 StrongAuth, Inc.
#
# $Date$
# $Revision$
# $Author$
# $URL$
#
# ***********************************************
#
#  888b    888          888
#  8888b   888          888
#  88888b  888          888
#  888Y88b 888  .d88b.  888888  .d88b.  .d8888b
#  888 Y88b888 d88""88b 888    d8P  Y8b 88K
#  888  Y88888 888  888 888    88888888 "Y8888b.
#  888   Y8888 Y88..88P Y88b.  Y8b.          X88
#  888    Y888  "Y88P"   "Y888  "Y8888   88888P'
#
# ***********************************************
# Centralized configuration properties for StrongKey CryptoEngine
#

############################## SAKA Configuration ##############################
#
# .d8888b.         d8888 888    d8P         d8888 
#d88P  Y88b       d88888 888   d8P         d88888 
#Y88b.           d88P888 888  d8P         d88P888 
# "Y888b.       d88P 888 888d88K         d88P 888 
#    "Y88b.    d88P  888 8888888b       d88P  888 
#      "888   d88P   888 888  Y88b     d88P   888 
#Y88b  d88P  d8888888888 888   Y88b   d8888888888 
# "Y8888P"  d88P     888 888    Y88b d88P     888 
#                                                 
#                                                 
#                                                 
# .d8888b.                     .d888 d8b                                    888    d8b                   
#d88P  Y88b                   d88P"  Y8P                                    888    Y8P                   
#888    888                   888                                           888                          
#888         .d88b.  88888b.  888888 888  .d88b.  888  888 888d888  8888b.  888888 888  .d88b.  88888b.  
#888        d88""88b 888 "88b 888    888 d88P"88b 888  888 888P"       "88b 888    888 d88""88b 888 "88b 
#888    888 888  888 888  888 888    888 888  888 888  888 888     .d888888 888    888 888  888 888  888 
#Y88b  d88P Y88..88P 888  888 888    888 Y88b 888 Y88b 888 888     888  888 Y88b.  888 Y88..88P 888  888 
# "Y8888P"   "Y88P"  888  888 888    888  "Y88888  "Y88888 888     "Y888888  "Y888 888  "Y88P"  888  888 
#                                             888                                                        
#                                        Y8b d88P                                                        
#                                         "Y88P"                                                         
#
############################## SAKA Configuration ##############################

# This section is to define the saka clusters available.
# Each cluster has an id, the count of saka urls in the cluster and a list of urls.
# Based on the count of urls, each of the url is specified under a seperate property
# name suffixed with <cluster.1.hosturl>.1= and <cluster.1.hosturl>.2= and so on.

# number of saka clusters (each cluster should have atleast one saka server) being configured for use by skce.
# Builds of SKCE from V1.0 B21 support only one SAKA cluster, the id of which has to be 1)
skce.cfg.property.saka.cluster.count=1

#property to let retries happen to other urls in a saka cluster if one of them fails
#possible values : yes | no
skce.cfg.property.saka.cluster.retryotherurl=yes

# The source for encryption key look-up; 
# Possible values are xmlfile | propertiesfile | both
#   xmlfile - the saka cluster configuration specified in the xml file (which is a part of zenc file) is used to retrieve the key
#   propertiesfile - the xml file is ignored and the saka cluster specified in the configuration file is used to retrieve the key
#   both - properties file is looked up first; if it doesnot work, xml file is looked up next
skce.cfg.property.saka.encryptionkey.retrievalmethod=both

# START - saka cluster 1
skce.cfg.property.saka.cluster.1.id=1
skce.cfg.property.saka.cluster.1.clustername=democluster
# saka cluster 1 - host urls
skce.cfg.property.saka.cluster.1.hosturls.count=1
skce.cfg.property.saka.cluster.1.hosturl.1=https://demo.strongauth.com
#skce.cfg.property.saka.cluster.1.hosturl.2=https://demo3.strongauth.com

# saka cluster 1 - number of domains
skce.cfg.property.saka.cluster.1.domains.count=1
# saka cluster 1 - for each domain, please specify, domain id, user credentials and default key information
# the key information here is optional, if not provided, the default key information provided in
# ../skce/etc/skce.configuration.properties will be used.
skce.cfg.property.saka.cluster.1.domain.1.id=
skce.cfg.property.saka.cluster.1.domain.1.username=
skce.cfg.property.saka.cluster.1.domain.1.password=
# END - saka cluster 1

# Default user credentials for encryption and decryption - 
# Used for all SAKA cluster domains if the user credentials are not specified for them.
# The default username for all operations on SKLES
skce.cfg.property.defaultusername=encryptdecrypt
# The default password for the default user
skce.cfg.property.defaultpassword=Abcd1234!
# SAKA XML Schema Definition namespace URL
skce.cfg.property.saka.xsdnsurl=http://skcengine.strongauth.com/SKLES201009
# SKLES WSDL suffix
skce.cfg.property.saka.encryption.wsdlsuffix=/strongkeyliteWAR/EncryptionService?wsdl


############################## SKCE General ##############################
#
#  .d8888b.  888    d8P   .d8888b.  8888888888      .d8888b.                                              888 
# d88P  Y88b 888   d8P   d88P  Y88b 888            d88P  Y88b                                             888 
# Y88b.      888  d8P    888    888 888            888    888                                             888 
#  "Y888b.   888d88K     888        8888888        888         .d88b.  88888b.   .d88b.  888d888  8888b.  888 
#     "Y88b. 8888888b    888        888            888  88888 d8P  Y8b 888 "88b d8P  Y8b 888P"       "88b 888 
#       "888 888  Y88b   888    888 888            888    888 88888888 888  888 88888888 888     .d888888 888 
# Y88b  d88P 888   Y88b  Y88b  d88P 888            Y88b  d88P Y8b.     888  888 Y8b.     888     888  888 888 
#  "Y8888P"  888    Y88b  "Y8888P"  8888888888      "Y8888P88  "Y8888  888  888  "Y8888  888     "Y888888 888 
# 
#                                                                            
############################## SKCE General ##############################

# Maximum permitted skew on Admin's PC for adminstrative commands - in seconds
skce.cfg.property.adminpc.maxskew=60
# The SKCEWS IN folder where the server downloads the files for crypto operations
skce.cfg.property.defaultinfolder=/usr/local/strongauth/skcews/engine_in
# Default out folder for the cryptoengine results
skce.cfg.property.defaultoutfolder=/usr/local/strongauth/skcews/engine_out
# Any logical name to identify your Eucalyptus instance. It could be anything.
# The key to the jets3tproperty file location should have this instance name as part of the key.
# for example, if the skce.euca.cloudname = myinstance,
# then there must be a key: skce.euca.myinstance.jets3tprop.location that points to the jets3t.properties for that instance.
skce.euca.cloudname=mywalrus
skce.euca.mywalrus.jets3tprop.location=/usr/local/strongauth/skce/etc/jets3t.properties
# Should this job be run in the background?
skce.cfg.property.keyremovaljob.run=true
# How frequently should this job run (in seconds)
skce.cfg.property.keyremovaljob.runfrequency=300
# The time after which inactive cached keys should be removed (in seconds)
skce.cfg.property.keyremovaljob.cutoff=300
#Key-use interval for the encryption key - daily, weekly, monthly or annual
skce.cfg.property.keyduration.enc=daily
# Flag to indicate whether to check for a HTTPUrlConnection response before trying
# to build a SOAP connection port to it.
skce.cfg.property.httpurlconn.verifyresponse=yes
# Time out value in seconds to catch a HTTPUrlConnection response.
skce.cfg.property.httpurlconn.timeout.seconds=3
# Should the job of checking saka periodically to generate missing default 
# encryption keys berun in the background?
skce.cfg.property.checksakajob.run=true
# How frequently should the job run
skce.cfg.property.checksakajob.runfrequency.hours=6
# Whether to generate and cache a default key automatically 
skce.cfg.property.cacheprimer.enable=true

# Properties related to key-custodians on the SKCE
# Name (and alias in truststore) for the Security Officer
skce.cfg.property.securityofficer=SecurityOfficer
# Name (and alias in truststore) for Key Custodian #1
skce.cfg.property.keycustodian1=KeyCustodian1
# Name (and alias in truststore) for Key Custodian #2
skce.cfg.property.keycustodian2=KeyCustodian2
# Default Password of the key-custodian truststore
skce.cfg.property.kctruststore.password=Abcd1234!

# Full path name of file of Security Officer's JCEKS for setting the secret PIN for the HSM or TPM
skce.cfg.property.sojceksfile=/usr/local/strongauth/skce/so/.skce-securityofficer.jceks
# Full path name of file of Security Officer's password for the TPM
skce.cfg.property.sopinfile=/usr/local/strongauth/skce/so/.skce-sopin
# Full path name of file of Key Custodian 1's JCEKS for setting the secret PIN for the HSM or TPM
skce.cfg.property.kc1jceksfile=/usr/local/strongauth/skce/kc1/.skce-keycustodian1.jceks
# Full path name of file of Key Custodian 2's JCEKS for setting the secret PIN for the HSM or TPM
skce.cfg.property.kc2jceksfile=/usr/local/strongauth/skce/kc2/.skce-keycustodian2.jceks
# Full path name of file of Key Custodian 1's PIN for the HSM or TPM
skce.cfg.property.kc1pinfile=/usr/local/strongauth/skce/kc1/.skce-kc1pin
# Full path name of file of Key Custodian 2's PIN for the HSM or TPM
skce.cfg.property.kc2pinfile=/usr/local/strongauth/skce/kc2/.skce-kc2pin
# Is this site using KC pin files or remote KC's
skce.cfg.property.usekcpinfiles=false

# Type of cryptomodule being used - hsm, tpm or software
skce.cfg.property.cryptomodule.type=software
# Vendor of the cryptomodule - utimaco, eracom, tpm or sun, bc for software
skce.cfg.property.cryptomodule.vendor=sun

# Default JCE Provider for HSM cryptomodule - TPM is fixed
# CRYPTOKI for Safenet, CryptoServer for Utimaco
skce.cfg.property.cryptomodule.provider=CryptoServer
# Configuration file for CryptoServer
skce.cfg.property.cryptomodule.provider.utimaco.configfile=/usr/local/strongauth/skce/etc/CryptoServer.cfg
# Keyfile for the CryptoServer administrator
skce.cfg.property.cryptomodule.provider.utimaco.adminkeyfile=ADMIN.key
# If Utimaco CS, the device where the HSM is available
skce.cfg.property.cryptomodule.provider.utimaco.device=/dev/cs2
# If Utimaco CS, the connection timeout for the HSM (in milliseconds)
skce.cfg.property.cryptomodule.provider.utimaco.timeout=5000
# If Utimaco CS, the default user that accesses the HSM
skce.cfg.property.cryptomodule.provider.utimaco.user=skce
# Flags for the utimaco.user credential
skce.cfg.property.cryptomodule.provider.utimaco.userflags=,00000002{CXI_GROUP=SKCE},hmacpwd,no_login+sma,

# Signing algorithm for certificates
skce.cfg.property.certsigningalgorithm=SHA256withRSA
# Validity of KC's self-signed certs - 10 years
skce.cfg.property.certvalidity=3650
# KC truststore default password
skce.cfg.property.kctruststore.password=Abcd1234!

# Default Signing algorithm - SHA256withRSA, SHA384withRSA, SHA512withRSA
skce.cfg.property.signingalgorithm=SHA256withRSA

# Prefix to use for signing key-aliases
skce.cfg.property.signprefix=SIGN-
# Suffix to use for signing public-key-aliases
skce.cfg.property.signsuffix=-SIGN
#Transform for wrapping symmetric keys with public-key
#skce.cfg.property.wraptransform=RSA/ECB/NoPadding
skce.cfg.property.wraptransform.pkcs1=RSA/ECB/PKCS1Padding
skce.cfg.property.wraptransform.oaep=RSA/ECB/OAEPWithSHA1AndMGF1Padding
#Parameters for the OAEP padding when used with the OAEP wrap-transform
skce.cfg.property.wraptransform.oaep.pssdigestalgorithm=SHA1
skce.cfg.property.wraptransform.oaep.pkcs1mgfalgorithm=MGF1
skce.cfg.property.wraptransform.oaep.pkcs1psourcealgorithm=TCPA
skce.cfg.property.wraptransform.oaep.pkcs1psourcealgorithm.encoding=ASCII

skce.cfg.property.db.signature.rowlevel.add=false
skce.cfg.property.db.signature.rowlevel.verify=false
skce.cfg.property.db.keyhandle.encrypt=false
skce.cfg.property.db.keyhandle.encrypt.saka.domainid=1

#Property to control where the FIDO related information gets stored
# options are Local or External
# Local - data is stored in the local db and the application is using the LDAP servlet
# External - client app is taking care of metadata and not using our ldap servlet 
skce.cfg.property.fido.usermetadata=Local

# Local only for now
skce.cfg.property.hashmap.type=Local

# property to determine if tld list has to be retrieved. Boolean value default to false
skce.cfg.property.retrieve.tld=false
#server id
#skce.cfg.property.serverid=1

#MongoDB related properties
skce.cfg.property.mongodb.url=
skce.cfg.property.mongodb.database=
skce.cfg.property.mongodb.replicaset=
skce.cfg.property.mongodb.username=
skce.cfg.property.mongodb.password=

# Should PKI2FIDO use OCSP for certificate validation?
skce.cfg.property.pkix.useocsp=true

skce.cfg.property.pkix.validate=true
skce.cfg.property.pkix.validate.method=truststore
skce.cfg.property.pkix.validate.default.truststore=/usr/local/strongauth/skce/etc/pkix-truststore.jceks
skce.cfg.property.pkix.validate.default.truststore.password=changeit

############################## ldape configuration ##############################
#
# 888           888                       8888888888                   d8b                   
# 888           888                       888                          Y8P                   
# 888           888                       888                                                
# 888       .d88888  8888b.  88888b.      8888888    88888b.   .d88b.  888 88888b.   .d88b.  
# 888      d88" 888     "88b 888 "88b     888        888 "88b d88P"88b 888 888 "88b d8P  Y8b 
# 888      888  888 .d888888 888  888     888        888  888 888  888 888 888  888 88888888 
# 888      Y88b 888 888  888 888 d88P     888        888  888 Y88b 888 888 888  888 Y8b.     
# 88888888  "Y88888 "Y888888 88888P"      8888888888 888  888  "Y88888 888 888  888  "Y8888  
#                            888                                   888                       
#                            888                              Y8b d88P                       
#                            888                               "Y88P"               
#                                                                            
############################## ldape configuration ##############################

# LDAP authentication type
ldape.cfg.property.service.ce.ldap.ldapauthtype=simple
# LDAP context factory to use
ldape.cfg.property.service.ce.ldap.ldapctxfactory=com.sun.jndi.ldap.LdapCtxFactory

# LDAP Admin-Authorized group
ldape.cfg.property.service.ce.ldap.ldapadmingroup=cn=AdminAuthorized
# LDAP Admin-Authorized group
ldape.cfg.property.service.ce.ldap.ldapservicegroup=cn=Services
# LDAP Encryption-Authorized group
ldape.cfg.property.service.ce.ldap.ldapencryptiongroup=cn=EncryptionAuthorized
# LDAP Decryption-Authorized group
ldape.cfg.property.service.ce.ldap.ldapdecryptiongroup=cn=DecryptionAuthorized
# LDAP CloudMove-Authorized group
ldape.cfg.property.service.ce.ldap.ldapcloudmovegroup=cn=CloudMoveAuthorized
# LDAP Load-Authorized group
ldape.cfg.property.service.ce.ldap.ldaploadgroup=cn=LoadAuthorized
# LDAP Remove-Authorized group
ldape.cfg.property.service.ce.ldap.ldapremovegroup=cn=RemoveAuthorized
# LDAP Sign-Authorized group
ldape.cfg.property.service.ce.ldap.ldapsigngroup=cn=SignAuthorized
# LDAP Sign-Authorized group
ldape.cfg.property.service.ce.ldap.ldapfidogroup=cn=FidoAuthorized

ldape.cfg.property.service.ce.ldap.ldaptype=LDAP
ldape.cfg.property.service.ce.ldap.ldapurl=ldap://localhost:1389
ldape.cfg.property.service.ce.ldap.ldapbinddn=CN=Directory Manager
ldape.cfg.property.service.ce.ldap.ldapbinddn.password=Abcd1234!
ldape.cfg.property.service.ce.ldap.ldapdnprefix=cn=
ldape.cfg.property.service.ce.ldap.ldapdnsuffix=,ou=users,ou=v2,ou=SKCE,ou=StrongAuth,ou=Applications,dc=strongauth,dc=com
ldape.cfg.property.service.ce.ldap.ldapgroupsuffix=,ou=groups,ou=v2,ou=SKCE,ou=StrongAuth,ou=Applications,dc=strongauth,dc=com

ldape.cfg.property.service.ce.ldap.adduser.defaultgroup=cn=FIDOUsers

# LDAP authentication type
ldape.cfg.property.service.ce.ldap.search.ldapauthtype=simple
# LDAP context factory to use
ldape.cfg.property.service.ce.ldap.search.ldapctxfactory=com.sun.jndi.ldap.LdapCtxFactory

ldape.cfg.property.service.ce.ldap.search.ldaptype=LDAP
ldape.cfg.property.service.ce.ldap.search.ldapurl=ldap://localhost:1389
ldape.cfg.property.service.ce.ldap.search.ldapbinddn=CN=Directory Manager
ldape.cfg.property.service.ce.ldap.search.ldapbinddn.password=Abcd1234!
ldape.cfg.property.service.ce.ldap.search.ldapdnprefix=cn=
ldape.cfg.property.service.ce.ldap.search.ldapdnsuffix=,ou=users,ou=v2,ou=SKCE,ou=StrongAuth,ou=Applications,dc=strongauth,dc=com
ldape.cfg.property.service.ce.ldap.search.ldapgroupsuffix=,ou=groups,ou=v2,ou=SKCE,ou=StrongAuth,ou=Applications,dc=strongauth,dc=com

#used for searching groups in LDAP
ldape.cfg.property.service.ce.ldap.search.subtree.base=ou=groups,ou=v2,ou=SKCE,ou=StrongAuth,ou=Applications,dc=strongauth,dc=com
ldape.cfg.property.service.ce.ldap.search.basedn=
ldape.cfg.property.service.ce.ldap.search.searchdn=

#Only for ldaptype = AD
# allowed values [Default,Subtree,groupname]
ldape.cfg.property.service.ce.ldap.search.grouprestriction.type=Default

# allowed values [prefix,suffix,both]
ldape.cfg.property.service.ce.ldap.search.groupname.method=both
ldape.cfg.property.service.ce.ldap.search.groupname.prefix=
ldape.cfg.property.service.ce.ldap.search.groupname.suffix=

# This property indicates the suffix to be appended to the groups inside the zenc
# metadata for files encrypted on build 112 and before.
ldape.cfg.property.service.ce.ldap.search.legacy.ldapgroupsuffix=

############################## skee configuration ##############################
#
# 8888888888                                             888                 8888888888                   d8b                   
# 888                                                    888                 888                          Y8P                   
# 888                                                    888                 888                                                
# 8888888    88888b.   .d8888b 888d888 888  888 88888b.  888888 88888b.      8888888    88888b.   .d88b.  888 88888b.   .d88b.  
# 888        888 "88b d88P"    888P"   888  888 888 "88b 888    888 "88b     888        888 "88b d88P"88b 888 888 "88b d8P  Y8b 
# 888        888  888 888      888     888  888 888  888 888    888  888     888        888  888 888  888 888 888  888 88888888 
# 888        888  888 Y88b.    888     Y88b 888 888 d88P Y88b.  888  888     888        888  888 Y88b 888 888 888  888 Y8b.     
# 8888888888 888  888  "Y8888P 888      "Y88888 88888P"   "Y888 888  888     8888888888 888  888  "Y88888 888 888  888  "Y8888  
#                                           888 888                                                   888                       
#                                      Y8b d88P 888                                              Y8b d88P                       
#                                       "Y88P"  888                                               "Y88P"                        
#                                                                                 
############################## skee configuration ##############################

# Default Size of AES encryption keys on SKLES server - 128, 192 or 256
skee.cfg.property.defaultaesenckeysize=256
# Default Size of 3DES encryption keys on SKLES server - 112 or 168
skee.cfg.property.defaultdesenckeysize=168
# Default Message-digest algorithm
skee.cfg.property.defaultdigestalgorithm=http://www.w3.org/2001/04/xmlenc#sha256
# Default algorithm for encryption keys (AES or DESede)
skee.cfg.property.defaultenckeyalgorithm=AES
# Default algorithm URL for encryption keys 
# (AES-128: http://www.w3.org/2001/04/xmlenc#aes128-cbc)
# (AES-192: http://www.w3.org/2001/04/xmlenc#aes192-cbc)
# (AES-256: http://www.w3.org/2001/04/xmlenc#aes256-cbc)
# (3DES: http://www.w3.org/2001/04/xmlenc#tripledes-cbc)
skee.cfg.property.defaultenckeyalgorithmurl=http://www.w3.org/2009/xmlenc11#aes256-gcm
# Default encryption transform to use with Ciphers
skee.cfg.property.defaultenctransform=AES/GCM/NoPadding
# Default HMAC transform - other supported transforms: HmacSHA224, HmacSHA384 and HmacSHA512
skee.cfg.property.default.hmactransform=HmacSHA256
# Default size of the initialization vector
skee.cfg.property.defaultivsize=16
# Default Psuedo-random number generator algorithm
skee.cfg.property.defaultprngalgorithm=SHA1PRNG
# Default random number generator : PRNG | TRNG
skee.cfg.property.rngtype=PRNG
skee.cfg.property.prng.seedsize=16
# Encryption transform to use with AES Ciphers
skee.cfg.property.aesenctransform=AES/GCM/NoPadding
# Buffer size for reading/writing files
skee.cfg.property.buffersize=16384
# Encryption transform to use with 3DES Ciphers
skee.cfg.property.desenctransform=DESede/CBC/ISO10126Padding
# Cut-off in file-size to use zipinputstream instead of memory-mapped files - default is one (1) Gigabyte
skee.cfg.property.zincsizecutoff=1073741824
# Name of the file used for test encryption and decryption done by the ping operation.
# This file should be located in the <skce-home>/etc directory.
skee.cfg.property.ping.testfilename=abc.txt
# RequiredAuthorization index is a number ranging from 1 to 4; that defines the
# level of user authorization required to perform an operation like encrypt or
# decrypt. This number will be a part of the xml file which is bundled along with
# the zenc file. The user here means the requester requesting the operation.
# 0 - The requester has to be LDAP authenticated, and should be a member of one 
#      of the LDAP authorized groups specified.
# 1 - (Default) The requester has to be authorized as explained in '1' above; 
#      additionally has to be fido authorized.
# 2 - Place holder for future
# 3 - Place holder for future
skee.cfg.property.requiredauthorization.index=0
#This property is effective in cloud operations on skee.
# Are the cloud credentials (accesskey, secretkey) encrypted or being passed 
# in plain-text form to SKCE? 'true' if encrypted on SAKA and 'false' if not.
#
# If true, the SKCEStorageInfoType.cloudcredentialid is looked up which should 
# contain sakaclusterid-sakadid-token (example: 1-1-1000000000089). SKEE 
# decrypts the credentials at the given saka cid and did.
# 
# If false, the SKCEStorageInfoType.cloudname, SKCEStorageInfoType.accesskey
# and SKCEStorageInfoType.secretkey are looked up for the cloud credentials.
#
#Default value if false, meaning cloud credentials are passed in plaintext form.
skee.cfg.property.cloud.credentials.encrypted=false

############################## skse configuration ##############################
#
#  .d8888b.  d8b                   d8b                       8888888888                   d8b                   
# d88P  Y88b Y8P                   Y8P                       888                          Y8P                   
# Y88b.                                                      888                                                
#  "Y888b.   888  .d88b.  88888b.  888 88888b.   .d88b.      8888888    88888b.   .d88b.  888 88888b.   .d88b.  
#     "Y88b. 888 d88P"88b 888 "88b 888 888 "88b d88P"88b     888        888 "88b d88P"88b 888 888 "88b d8P  Y8b 
#       "888 888 888  888 888  888 888 888  888 888  888     888        888  888 888  888 888 888  888 88888888 
# Y88b  d88P 888 Y88b 888 888  888 888 888  888 Y88b 888     888        888  888 Y88b 888 888 888  888 Y8b.     
#  "Y8888P"  888  "Y88888 888  888 888 888  888  "Y88888     8888888888 888  888  "Y88888 888 888  888  "Y8888  
#                     888                            888                              888                       
#                Y8b d88P                       Y8b d88P                         Y8b d88P                       
#                 "Y88P"                         "Y88P"                           "Y88P"                           
#                                                                            
############################## skse configuration ##############################

# username for the HSM where the key is loaded by the load function
skse.cfg.property.trsm.username=JCE
# JCEKS localkey store location default name and path. Even if the directory does 
# not exist, it will be created.
skse.cfg.property.signing.jcekslocation=/usr/local/strongauth/skce/keystores/signingkeystore.jceks
# PKCS12 local key store location default name and path. Even if the directory 
# does not exist, it will be created.
skse.cfg.property.signing.p12location=/usr/local/strongauth/skce/keystores/signingkeystore.p12
# flag to display the contents of manifest file that was sent for signing
skse.cfg.property.sign.displaymanifest=yes
skse.cfg.property.sign.root.alias=US
skse.cfg.property.sign.subca.alias=US

# Properties for the XMLSignature implementation

# JCE Provider to use by default - software-based - must be overriden for HSM-use - other supported value is CryptoServer
skse.cfg.property.dsig.jceprovider=SunJCE
# Default keystore-type containing the signing key; other supported value is HSM
skse.cfg.property.dsig.keystoretype=JCEKS
# Default Location of default keystore; other supported value is CryptoServer
skse.cfg.property.dsig.keystore=/usr/local/strongauth/skce/keystores/dsigkeystore.jceks
# Default Password of default keystore
skse.cfg.property.dsig.keystore.password=Abcd1234!
# Default password of DSIG verification key's truststore
skse.cfg.property.dsig.truststore.password=Abcd1234!
# Default DN of signing-key certificate
#skse.cfg.property.dsig.1.signingdn=CN=SKCE Signing Key,OU=For TEST Use Only,OU=StrongKey CryptoEngine,O=StrongAuth Inc
# Default signing-key alias
skse.cfg.property.dsig.signingkey.alias=zenc-signing-key

############################## skfe configuration ##############################
#
# 8888888888 8888888 8888888b.   .d88888b.      8888888888                   d8b                   
# 888          888   888  "Y88b d88P" "Y88b     888                          Y8P                   
# 888          888   888    888 888     888     888                                                
# 8888888      888   888    888 888     888     8888888    88888b.   .d88b.  888 88888b.   .d88b.  
# 888          888   888    888 888     888     888        888 "88b d88P"88b 888 888 "88b d8P  Y8b 
# 888          888   888    888 888     888     888        888  888 888  888 888 888  888 88888888 
# 888          888   888  .d88P Y88b. .d88P     888        888  888 Y88b 888 888 888  888 Y8b.     
# 888        8888888 8888888P"   "Y88888P"      8888888888 888  888  "Y88888 888 888  888  "Y8888  
#                                                                        888                       
#                                                                   Y8b d88P                       
#                                                                    "Y88P"         
#                                                                            
############################## skfe configuration ##############################

# How frequently should the fido user session cleanup job run? 
skfe.cfg.property.usersession.flush.frequency.seconds=5
# When the cleanup job runs, how much old should the fido user session map entry 
# be for it to be deleted? 
skfe.cfg.property.usersession.flush.cutofftime.seconds=30
# How frequently should the fido keys cleanup job run? 
skfe.cfg.property.fidokeys.flush.frequency.seconds=5
# When the cleanup job runs, how much old should the fido keys map entry 
# be for it to be deleted? 
skfe.cfg.property.fidokeys.flush.cutofftime.seconds=30
# How frequently should the fido user registered key random ids cleanup job run?
skfe.cfg.property.userkeypointers.flush.frequency.seconds=5
# When the cleanup job runs, how much old should the user registered key random 
# ids map entry be for it to be deleted? 
skfe.cfg.property.userkeypointers.flush.cutofftime.seconds=300
# Is this skce enterprise application being run locally just for demonstration 
# purposes OR is it being run in a production environment with a fido backend 
# application to handle the the database? 
# Valid options are true (for local demo run) or false (for a production scenario)
# If it is a local demo case, there is a local javadb being used as a database
# and if it is a production run, the database is being taken care of by a backend
# application.
skfe.cfg.property.runtime.localdemo=true
# URL for the application identity file that lists the facets allowed to communicate
# with this fido server.
skfe.cfg.property.1.applicationid=https://fidodemo.strongauth.com/app.json
# entrophy length to be used while generating nonce for fido registraiton and
# authentication
skfe.cfg.property.entropylength=512

skfe.cfg.property.fido.userid.length=32

##########################ZMQ###############################
skce.cfg.property.messaging.statechange.waittime=15

#skce.cfg.property.replicate=true

# Number of records to batch before committing to database
skce.cfg.property.jdbc.dbcommitsize=200
# Number of rows to fetch when retrieving records for batch jobs
skce.cfg.property.jdbc.dbfetchsize=500
# Number of records to process within a single batch iteration
skce.cfg.property.jdbc.dbprocesssize=10000
# JDBC Connection Pool JNDI name within Glassfish
skce.cfg.property.jdbc.jndiname=jdbc/strongkeylite

# The amount of time (in seconds) a record must be in the Replication table before Backlog Processor picks it up
skce.cfg.property.messaging.timediff=60
# The amount of time (ms) the BacklogProcessor must sleep when there are no objects back-logged for replication
skce.cfg.property.messaging.blpsleeptime=60

#Property which determines if the deployment is a standalone FE or part of an enterprise SAKA
skce.cfg.property.standalone.fidoengine=false
#Password for the signing keystore in the stand alone SKFE 
skce.cfg.property.standalone.signingkeystore.password=Abcd1234!

########################## JUnit testing configuration ##########################
# 
#   888888 888     888          d8b 888        88888888888                888             
#     "88b 888     888          Y8P 888            888                    888             
#      888 888     888              888            888                    888             
#      888 888     888 88888b.  888 888888         888   .d88b.  .d8888b  888888 .d8888b  
#      888 888     888 888 "88b 888 888            888  d8P  Y8b 88K      888    88K      
#      888 888     888 888  888 888 888            888  88888888 "Y8888b. 888    "Y8888b. 
#      88P Y88b. .d88P 888  888 888 Y88b.          888  Y8b.          X88 Y88b.       X88 
#      888  "Y88888P"  888  888 888  "Y888         888   "Y8888   88888P'  "Y888  88888P' 
#    .d88P                                                                                
#  .d88P"                                                                                 
# 888P"                                                                           
#                  
########################## JUnit testing configuration ##########################

## The properties below are used only by the junit tests
## host urls where the skce application is running for junit testing
# StrongKey Encryption Engine (skee) SOAP WSDL url
skce.cfg.property.junit.skee.url.soap=https://fidodemo.strongauth.com/skee/SKEEServlet?wsdl
# StrongKey Signing Engine (skse) SOAP WSDL url
skce.cfg.property.junit.skse.url.soap=https://fidodemo.strongauth.com/skse/SKSEServlet?wsdl
# Lightweight Directory Access Protocol Engine (ldape) SOAP WSDL url
skce.cfg.property.junit.ldape.url.soap=https://fidodemo.strongauth.com/ldape/LDAPEServlet?wsdl
# StrongKey Fido Engine (skfe) SOAP WSDL url
skce.cfg.property.junit.skfe.url.soap=https://fidodemo.strongauth.com/skfe/soap?wsdl
# StrongKey Fido Engine (skfe) REST url
skce.cfg.property.junit.skfe.url.rest=https://fidodemo.strongauth.com/skfe/rest
# test user name (present in LDAP) to test fido functionality through junits
skce.cfg.property.junit.skfe.testuser=fidotestuser

############################### Fixed properties ###############################
# 
# 8888888888 d8b                        888
# 888        Y8P                        888
# 888                                   888
# 8888888    888 888  888  .d88b.   .d88888
# 888        888 `Y8bd8P' d8P  Y8b d88" 888
# 888        888   X88K   88888888 888  888
# 888        888 .d8""8b. Y8b.     Y88b 888
# 888        888 888  888  "Y8888   "Y88888
# 
############################### Fixed properties ###############################

# Installation directory of the skcengine software
skce.cfg.property.skcehome=/usr/local/strongauth/skce
# Daily alias name format (see SimpleDateFormat in JDK API docs)
skce.cfg.property.keyuse.dailyformat=dd-MMM-yyyy
# Weekly alias name format (has to be prepended with "WEEK-" in the code)
skce.cfg.property.keyuse.weeklyformat=w-yyyy
# Monthly alias name format
skce.cfg.property.keyuse.monthlyformat=MMM-yyyy
# Annual alias name format
skce.cfg.property.keyuse.annualformat=yyyy

#################################### FIDO2 #####################################
#
# 8888888888 8888888 8888888b.   .d88888b.   .d8888b.  
# 888          888   888  "Y88b d88P" "Y88b d88P  Y88b 
# 888          888   888    888 888     888        888 
# 8888888      888   888    888 888     888      .d88P 
# 888          888   888    888 888     888  .od888P"  
# 888          888   888    888 888     888 d88P"      
# 888          888   888  .d88P Y88b. .d88P 888"       
# 888        8888888 8888888P"   "Y88888P"  888888888 
#
#################################### FIDO2 #####################################
skfe.cfg.property.fido2.debug.mode=false
skfe.cfg.property.fido2.user.settings.version=1